= content_for :title, "#{@repository.name} : #{@branch.name}"
= content_for :favicon do
  - if @current_build
    = favicon_link_tag image_path("#{@current_build.to_color}.png"), type: 'image/png'

- content_for :header do
  %ul.links
    %li= link_to("Settings", repository_edit_path(@repository), class: "info")
    %li= link_to("Branches", repository_branches_path(@repository))
  = form_for @build, url: request_new_build_repository_branch_path(@repository, @branch) do |f|
    = f.submit "Build", class: 'build-button'

- cache(@branch) do
  %div.health.button= link_to('Health', health_repository_branch_path(@repository, @branch, 'count' => 12))
  - rate = error_free_pass_rate(@builds)
  - avg_rebuilds = average_number_of_rebuilds(@builds)
  - median_seconds_to_success = median_elapsed_time(@builds)
  .performance
    - if median_seconds_to_success
      %div{title: "Median elapsed time for successful builds on #{@branch.name}"}
        %span.label Median time:
        %span.number #{seconds_to_minutes(median_seconds_to_success)} minutes
    - else
      %div{title: "Median elapsed time for successful builds on #{@branch.name}"}
        %span.label Never built

    %div{title: "Average number of build parts reattempted to get to a successful build", class: rebuild_count_css_class(avg_rebuilds)}
      %span.number= format('%0.1f', avg_rebuilds)
      %span.label rebuilds required on average

    %div{title: "Percentage of builds with all parts succeeding on the first try", class: pass_rate_css_class(rate)}
      %span.number= rate
      %span.label completion rate on first try

%h2.subheader
  = @repository.namespace + '/' + @repository.name
  &ndash;
  = @branch.name

#plot

.select_commit
  %input{type: "text", id: "build_ref_input", placeholder: "Commit Revision"}
  %button{onClick: "goto_ref();"} Lookup Commit

= content_for :javascript do
  :javascript
    $(document).ready(Kochiku.graphBuildTimes("#{escape_javascript(@repository.to_param)}", "#{escape_javascript(@branch.name)}"));
    $(function() {
      var whisker = $('th.whisker');
      $('table')
        .on('mouseenter', '.whisker .part-status', function() {
          whisker.text($(this).data('ref'));
        })
        .on('mouseleave', '.whisker', function() {
          whisker.text('Previous');
        });
    });

    var goto_ref = function() {
      window.location.href = "//" + location.host + "/builds/" + $('#build_ref_input').val();
    };

- if @current_build
  %table.project-part-info
    %thead
      %tr
        %th.right.whisker Previous
        %th.status
          %code.build-status{class: @current_build.state}
            = link_to @current_build.ref[0, 5], repository_build_path(@repository, @current_build)
        - display_ruby_version = multiple_ruby_versions?(@current_build)
        - build_metadata_headers(@current_build, display_ruby_version).each do |header|
          %th{class: header.downcase.gsub(/\W+/, '-')}= header
        %th.type Type
        %th.right.time Elapsed
        %th.right.count Attempt
        %th.right.actions Actions
    - @build_parts.each do |_key, build_parts_by_build|
      - part = build_parts_by_build.values.first
      - build_part = build_parts_by_build[@current_build]
      - cache(part) do
        %tr{:id => dom_id(part)}
          %td.right.whisker
            - total_attempts = 0
            - @builds[0..-2].each do |previous_build|
              - previous_part = build_parts_by_build[previous_build]
              - if previous_part.present?
                - attempts = previous_part.build_attempts.size
                - total_attempts += attempts
                = link_to "/#{@repository.to_param}/builds/#{previous_build.to_param}/parts/#{previous_part.to_param}" do
                  %span.part-status{class: [previous_part.status, "attempt-#{attempts}"], title: pluralize(attempts, 'attempt'), data: { ref: previous_build.ref[0, 5] }}
              - else
                %span.part-status.attempt-0
          %td
            - if build_part
              %span.part-status{class: build_part.status}
                = link_to build_part.status.to_s.capitalize, "/#{@repository.to_param}/builds/#{@current_build.to_param}/parts/#{build_part.to_param}"
          - build_metadata_values(@current_build, part, display_ruby_version).each do |value|
            %td= value
          %td= part.kind.to_s
          %td.right.elapsed= build_part.elapsed_time ? duration_strftime(build_part.elapsed_time) : '' if build_part
          %td.right
            = build_part.build_attempts.size if build_part
            - average = (total_attempts.to_f / (@builds.length - 1)).round 0 if @builds.length > 1
            - if average && average > 1
              %span{title: 'Average'} / #{average}
          %td.right
            - if build_part && build_part.unsuccessful?
              = link_to "Rebuild", "/#{@repository.to_param}/builds/#{@current_build.to_param}/parts/#{build_part.to_param}/rebuild", method: :post

- if @current_build
  = content_for :javascript do
    :javascript
      (function() {
        var startTimes = #{
          start_times = {}
          @current_build.build_parts.each { |part| start_times[dom_id(part)] = part.started_at if part.running? }
          start_times.to_json
        };
        var now = new Date();
        for(var partDomId in startTimes) {
          if(!startTimes.hasOwnProperty(partDomId)) {
            continue;
          }
          var startTime = new Date(Date.parse(startTimes[partDomId]));
          $('.project-part-info tbody').find('tr#' + partDomId + ' > .elapsed').text(
            Math.round((now-startTime)/60000) + ":" + ("00" + (Math.round((now-startTime)/1000)%60)).slice(-2));
        }
      })()
